"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behavior of this scalar.
  """
  url: String!
) on SCALAR

type CeramicAccount implements Node {
  """
  Globally unique identifier of the account (DID string)
  """
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  taskList(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TaskConnection
}

"""
A Ceramic Commit ID
"""
scalar CeramicCommitID

input CreateTaskInput {
  content: TaskInput!
  clientMutationId: String
}

type CreateTaskPayload {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node

  """
  Account currently authenticated on the Ceramic instance, if set
  """
  viewer: CeramicAccount
  document: Task!
  clientMutationId: String
}

type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskPayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

input PartialTaskInput {
  title: String
  completed: Boolean
}

type Query {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node

  """
  Account currently authenticated on the Ceramic instance, if set
  """
  viewer: CeramicAccount
  taskIndex(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TaskConnection
}

type Task implements Node {
  id: ID!
  title: String!
  completed: Boolean!

  """
  Account controlling the document
  """
  author: CeramicAccount!

  """
  Current version of the document
  """
  version: CeramicCommitID!
}

"""
A connection to a list of items.
"""
type TaskConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TaskEdge]
}

"""
An edge in a connection.
"""
type TaskEdge {
  """
  The item at the end of the edge
  """
  node: Task

  """
  A cursor for use in pagination
  """
  cursor: String!
}

input TaskInput {
  title: String!
  completed: Boolean!
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """
  Only perform mutation if the document matches the provided version
  """
  version: CeramicCommitID
}

input UpdateTaskInput {
  id: ID!
  content: PartialTaskInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

type UpdateTaskPayload {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node

  """
  Account currently authenticated on the Ceramic instance, if set
  """
  viewer: CeramicAccount
  document: Task!
  clientMutationId: String
}
